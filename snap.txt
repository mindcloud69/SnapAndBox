local settings={}
settings["partnerID"]=0
settings["myID"]=os.getComputerID()
settings["debug"]=false
settings["reserveFuelLevel"]=10
settings["chargeLevel"]=500

function loadSettings()
   local file = fs.open("SnapBoxSettings","r")
   local data = file.readAll()
   file.close()
   settings=textutils.unserialize(data)
end

function saveSettings()
    local file = fs.open("SnapBoxSettings","w")
    file.write(textutils.serialize(settings))
    file.close()
end

function needFuel()
    if turtle.getFuelLevel()<settings["reserveFuelLevel"] then
        sendMessageToPartner("yes")
    else
        sendMessageToPartner("no")
    end
end

function refuel()
    while turtle.getFuelLevel()<settings["chargeLevel"] do
        sleep(1)
        if settings["debug"]==true then
            print(turtle.getFuelLevel())
        end
    end
    sendMessageToPartner("charged")
end

function checkStatus()
	if turtle.getItemCount(1)>0 then
		print("Energy Cell OK")
	else
		print("Please insert Locked Energy Tesseract or Redstone Energy Cell into slot 1")
		while turtle.getItemCount(1)==0 do
			turtle.select(1)
			sleep(1)
		end
	end
	if turtle.getFuelLevel()<settings["reserveFuelLevel"] then
        if turtle.getItemCount(16)>0 then
            print("Fuel Level OK")
        else
            turtle.select(16)
            print("Please insert fuel into slot 16")
            while turtle.getItemCount(16)==0 do
                sleep(1)
            end
        end
    end
end

function waitForPartner()
	print("Waiting to pair with partner")
	rednet.broadcast()
	local id, msg, distance
	while id==nil or id==settings["myID"] do
	    id, msg, distance = rednet.receive()
	end
	rednet.broadcast()
	print("Partner Found")
	if settings["debug"]==true then
            print(id)
        end
	settings["partnerID"]=id
    saveSettings()
end

function sendMessageToPartner(message)
    if settings["debug"]==true then
        print("Sending Message" .. message)
    end
	rednet.send(settings["partnerID"],message)
end

function forward()
    while turtle.forward()==false do
        print("Problem Moving Forward")
    end
    sendMessageToPartner("forward")
end

function powerUp()
	turtle.select(1)
	turtle.digDown()
    sendMessageToPartner("powerup")
end

function powerDown()
	turtle.select(1)
	while turtle.placeDown()==false and turtle.getItemCount(1)>0 do
            print("Problem placing power Down")
	end
    sendMessageToPartner("powerdown")
end

function backward()
    turtle.turnLeft()
    turtle.turnLeft()
    while turtle.forward()==false do
        print("Problem Moving Forward")
    end
    turtle.turnLeft()
    turtle.turnLeft()
    sendMessageToPartner("backward")
end

function attack()
    turtle.attack()
    sendMessageToPartner("attack")
end

function waitForMessageFromPartner()
    if settings["debug"]==true then
        print("Waiting for message")
    end
    local id, msg, distance
    while id==nil or id==settings["myID"] or id ~= settings["partnerID"] do
	    id, msg, distance = rednet.receive()
	end
    if msg=="powerdown" then
        powerDown()
    elseif msg=="powerup" then
        powerUp()
    elseif msg=="forward" then
        forward()
    elseif msg=="left" then
        turtle.turnLeft()
        sendMessageToPartner("left")
    elseif msg=="backward" then
        backward()
    elseif msg=="attack" then
        attack()
    elseif msg=="refuel" then
        refuel()
    elseif msg=="needfuel" then
        needFuel()
    else
        if settings["debug"]==true then
            print("ERROR - Unknown Partner Message")
            print("Received: .. msg")
        end
    end
end

function checkResume()
    local file=fs.open("SnapBoxPartnerID","r")
    if file==nil then
        return false
    else
        file.close()
        return true
    end
end

--check to make sure it has all the items it needs
rednet.open("right")
if checkResume()==false then
    checkStatus()

    --initial refuel
    turtle.select(16)
    turtle.refuel(1)
    turtle.select(1)

    --wait to find partner
    waitForPartner()
else
    loadSettings()
end

while true do
    waitForMessageFromPartner()
end