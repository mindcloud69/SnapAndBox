--load settings
--travel number of blocks and come back - z pattern
--resuming with refuel

local stop=false
local settings={}
settings["miningTime"]=5
settings["partnerID"]=0
settings["myID"]=os.getComputerID()
settings["digDelay"]=1
settings["reserveFuelLevel"]=10
settings["chargeLevel"]=500
settings["debug"]=false
settings["blocksToTravel"]=0
settings["blocksTraveled"]=0
settings["rowsToMine"]=0
settings["rowsTraveled"]=0
settings["blocksMined"]=0
local nextStep=nil

function loadSettings()
   local file = fs.open("SnapBoxSettings","r")
   local data = file.readAll()
   file.close()
   settings=textutils.unserialize(data)
end

function saveSettings()
    local file = fs.open("SnapBoxSettings","w")
    file.write(textutils.serialize(settings))
    file.close()
end

function checkStatus()
    if settings["debug"]==true then
        print("In checkStatus")
    end

    if turtle.getItemCount(1)>0 then
        print("Ender Chest OK")
    else
        print("Please insert an Ender Chest into slot 1")
        while turtle.getItemCount(1)==0 do
            turtle.select(1)
            sleep(1)
        end
    end
    if turtle.getItemCount(2)>0 then
        print("Mining Well OK")
    else
        print("Please insert Mining Well into slot 2")
        while turtle.getItemCount(2)==0 do
            turtle.select(2)
            sleep(1)
        end
    end
    if turtle.getItemCount(3)>0 then
        print("Charge Station OK")
    else
        turtle.select(3)
        print("Please insert Advanced Charge Station (or higher) into slot 3")
        while turtle.getItemCount(3)==0 do
            sleep(1)
        end
    end
    if turtle.getFuelLevel()<settings["reserveFuelLevel"] then
        if turtle.getItemCount(16)>0 then
            print("Fuel Level OK")
        else
            turtle.select(16)
            print("Please insert fuel in slot 16")
            while turtle.getItemCount(16)==0 do
                sleep(1)
            end
        end
    end

end

function waitForPartner()
    if settings["debug"]==true then
        print("In waitForPartner")
    end
	print("Waiting to pair with partner")
	rednet.broadcast()
	local id, msg, distance
	while id==nil or id==settings["myID"] do
	    id, msg, distance = rednet.receive()
	end
	rednet.broadcast()
	print("Partner Found")
	if settings["debug"]==true then
	    print(id)
	end
	settings["partnerID"]=id
    saveSettings()
end

function sendMessageToPartner(message)
    if settings["debug"]==true then
        print("Sending Message " .. message)
    end
	rednet.send(settings["partnerID"],message)
end

function waitForMessageFromPartner(message)
    if settings["debug"]==true then
        print("Waiting for message " .. message)
    end
    local id, msg, distance
    while id==nil or id==settings["myID"] or id ~= settings["partnerID"] do
	    id, msg, distance = rednet.receive()
	end
    if msg~=message then
        print("ERROR - Unexpected Partner Message")
        print("Expected:" .. message)
        print("Received: .. msg")
        shell.exit()
    end
end

function moveForward()
    if settings["debug"]==true then
        print("trying to move forward")
    end
    while turtle.detect() do
        turtle.dig()
        sleep(settings["digDelay"])
    end
    while turtle.forward()==false do
        turtle.dig()
	    sleep(settings["digDelay"])
	    turtle.attack()
	end
end

function moveUp()
    if settings["debug"]==true then
        print("trying to move up")
    end
    while turtle.detectUp() do
        turtle.digUp()
        sleep(settings["digDelay"])
    end
    while turtle.up()==false do
        turtle.digUp()
	    sleep(settings["digDelay"])
	    turtle.attackUp()
	end
end

function topOff()
    if turtle.getFuelLevel()<settings["reserveFuelLevel"] or partnerNeedsFuel()==true then
        setNextStep("chargepowerdown")
    else
        setNextStep("placeminingwell")
    end
end

function partnerNeedsFuel()
    sendMessageToPartner("needfuel")
    local id, msg, distance
    while id==nil or id==settings["myID"] or id ~= settings["partnerID"] do
        id, msg, distance = rednet.receive()
    end
    if msg=="yes" then
        return true
    elseif msg=="no" then
        return false
    else
        print("ERROR - Unexpected Partner Message")
        print("Received: .. msg")
        shell.exit()
    end
end

function placeCharge()
    turtle.select(3)
    turtle.place()
end

function digCharge()
    turtle.select(3)
    turtle.dig()
end

function placeChest()
    turtle.select(1)
    while turtle.placeUp()==false do
        turtle.attackUp()
        turtle.digUp()
        sleep(settings["digDelay"])
    end
end

function digChest()
    turtle.select(1)
    turtle.digUp()
end

function placeMiningWell()
    turtle.select(2)
    while turtle.placeDown()==false do
        turtle.digDown()
        turtle.attackDown()
        sleep(settings["digDelay"])
    end
end

function digMiningWell()
    turtle.select(2)
    if turtle.getItemCount(2) > 0 then
        turtle.drop()
    end
    turtle.digDown()
end

function emptyInventory()
    --for all inventory spots except fuel spot 16
    for i=1,15 do
        if turtle.getItemCount(i)>0 then
            if i~=3 then
                while turtle.getItemCount(i)>0 do
                    turtle.select(i)
                    turtle.dropUp()
                end
            end
        end
    end
end

function setNextStep(next)
    print("in set next step "..next)
    local file=fs.open("SnapBoxStepTracker","w")
    file.write(next)
    file.close()
    nextStep=next
end

function getNextStep()
    local file=fs.open("SnapBoxStepTracker","r")
    if file==nil then
        setNextStep("topoff")
    end
    file=fs.open("SnapBoxStepTracker","r")
    if file~=nil then
        local returnValue=file.readAll()
        file.close()
        setNextStep(returnValue)
    end

end

function incrementBlockCounter()
    settings["blocksTraveled"]=settings["blocksTraveled"]+1
    saveSettings()
end

function checkReturn()
    if settings["blocksTraveled"]>=settings["blocksToTravel"] and settings["blocksToTravel"]~=0 then
        return true
    else
        return false
    end
end

function checkResume()
    local file=fs.open("SnapBoxStepTracker","r")
    if file==nil then
        return false
    else
        file.close()
        return true
    end
end

function doNextStep()
    if nextStep=="topoff" then
        topOff()
    elseif nextStep=="chargepowerdown" then
        sendMessageToPartner("powerdown")
        waitForMessageFromPartner("powerdown")
        setNextStep("chargepartnerleft1")
    elseif nextStep=="chargepartnerleft1" then
        sendMessageToPartner("left")
        waitForMessageFromPartner("left")
        setNextStep("chargepartnerleft2")
    elseif nextStep=="chargepartnerleft2" then
        sendMessageToPartner("left")
        waitForMessageFromPartner("left")
        setNextStep("chargepartnerforward")
    elseif nextStep=="chargepartnerforward" then
        sendMessageToPartner("forward")
        waitForMessageFromPartner("forward")
        setNextStep("chargepartnerleft3")
    elseif nextStep=="chargepartnerleft3" then
        sendMessageToPartner("left")
        waitForMessageFromPartner("left")
        setNextStep("chargepartnerleft4")
    elseif nextStep=="chargepartnerleft4" then
        sendMessageToPartner("left")
        waitForMessageFromPartner("left")
        setNextStep("chargeturnleft1")
    elseif nextStep=="chargeturnleft1" then
        turtle.turnLeft()
        setNextStep("chargeturnleft2")
    elseif nextStep=="chargeturnleft2" then
        turtle.turnLeft()
        setNextStep("chargeplacecharge")
    elseif nextStep=="chargeplacecharge" then
        placeCharge()
        setNextStep("chargewaitforrefuel")
    elseif nextStep=="chargewaitforrefuel" then
        sendMessageToPartner("refuel")
        waitForMessageFromPartner("charged")
        while turtle.getFuelLevel() < settings["chargeLevel"] do
            sleep(1)
            if settings["debug"]==true then
                print(turtle.getFuelLevel())
            end
        end
        setNextStep("chargedigcharge")
    elseif nextStep=="chargedigcharge" then
        digCharge()
        setNextStep("chargeturnleft3")
    elseif nextStep=="chargeturnleft3" then
        turtle.turnLeft()
        setNextStep("chargeturnleft4")
    elseif nextStep=="chargeturnleft4" then
        turtle.turnLeft()
        setNextStep("chargeforward")
    elseif nextStep=="chargeforward" then
        sendMessageToPartner("forward")
        waitForMessageFromPartner("forward")
        setNextStep("chargepowerup")
    elseif nextStep=="chargepowerup" then
        sendMessageToPartner("powerup")
        waitForMessageFromPartner("powerup")
        setNextStep("placeminingwell")
    elseif nextStep=="placeminingwell" then
        placeMiningWell()
        setNextStep("placechest")
    elseif nextStep=="placechest" then
        placeChest()
        setNextStep("partnerpowerdown")
    elseif nextStep=="partnerpowerdown" then
        sendMessageToPartner("powerdown")
        waitForMessageFromPartner("powerdown")
        incrementBlockCounter()
        sleep(settings["miningTime"])
        setNextStep("partnerpowerup")
    elseif nextStep=="partnerpowerup" then
        sendMessageToPartner("powerup")
        waitForMessageFromPartner("powerup")
        setNextStep("emptyinventory")
    elseif nextStep=="emptyinventory" then
        emptyInventory()
        setNextStep("digchest")
    elseif nextStep=="digchest" then
        digChest()
        turtle.down()
        setNextStep("digminingwell")
    elseif nextStep=="digminingwell" then
        digMiningWell()
        setNextStep("moveforward")
    elseif nextStep=="moveforward" then
        moveForward()
        setNextStep("partnerforward")
    elseif nextStep=="partnerforward" then
        sendMessageToPartner("forward")
        waitForMessageFromPartner("forward")
        setNextStep("checkreturn")
    elseif nextStep=="checkreturn" then
        if checkReturn()==true then
            print("going home"..settings["blocksToTravel"])
            setNextStep("gohome")
        else
            setNextStep("topoff")
        end
    elseif nextStep=="gohome" then
        shell.run("clearsettings")
        stop=true
    else
        print("Unknown Step - Something Went Wrong. Giving Up "..nextStep)
    end
end

--check to make sure it has all the items it needs
rednet.open("right")
if checkResume()==false then
    checkStatus()
    print("Enter the number of blocks to travel before coming home (0 for never come home)")
    settings["blocksToTravel"]=tonumber(io.read())
    --initial refuel
    turtle.select(16)
    turtle.refuel(1)
    turtle.select(1)
    --wait to find partner
    waitForPartner()
    nextStep="topoff"
else
    loadSettings()
    getNextStep()
    --this sleep allows snap to wake up before box
    sleep(5)
end

--main loop
while stop==false do
    doNextStep()
end